---
description: Rules for creating customs routes for the backend.
globs: 
alwaysApply: false
---
# Règles pour les Routes Fastify

## Structure et Organisation

Les routes Fastify doivent suivre cette structure :

```typescript
import { controller } from '@/controllers/controller';
import { verifyAccess } from '@/middleware';
import { isAuthenticated } from '@/middleware/auth';
import { createSwaggerSchema } from '@/utils/swaggerUtils';
import { DTOSchema, UserRole } from '@shared/dto';
import { FastifyInstance } from 'fastify';

export async function routes(fastify: FastifyInstance) {
    // Route avec documentation Swagger
    fastify.get('/', {
        schema: createSwaggerSchema(
            'Description de la route',
            [
                { message: 'Succès', data: [], status: 200 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: 'Erreur serveur', data: [], status: 500 },
            ],
            bodySchema, // ou null
            true, // si authentification requise
            querySchema, // ou null
            ['Tag']
        ),
        preHandler: [isAuthenticated, verifyAccess(UserRole.ADMIN)],
        handler: controller.method,
    });
}
```

## Conventions

### Nommage des fichiers
- `userRoutes.ts`, `postRoutes.ts`, etc.
- Export de fonction async nommée selon la ressource

### Documentation Swagger
- **Toujours** utiliser `createSwaggerSchema`
- Décrire tous les codes de statut possibles
- Spécifier les schemas de body/query si nécessaires
- Grouper avec des tags appropriés

### Middleware
- `isAuthenticated` pour vérifier le token JWT
- `verifyAccess(UserRole.X)` pour les permissions
- L'ordre est important : auth puis accès

### Gestion des erreurs dans responses
```typescript
// Réponses standard à documenter
{ message: 'Succès', data: [], status: 200 }
{ message: 'Non autorisé', data: [], status: 401 }
{ message: 'Interdit', data: [], status: 403 }
{ message: 'Non trouvé', data: [], status: 404 }
{ message: 'Erreur serveur', data: [], status: 500 }
```

### Schemas
- Utiliser les DTOs de `@shared/dto` pour body/query
- `bodySchema` pour POST/PATCH/PUT
- `querySchema` pour les paramètres de requête (pagination, filtres)
- `null` si pas de validation nécessaire

## Exemple Complet CRUD

```typescript
export async function userRoutes(fastify: FastifyInstance) {
    // GET ALL - Récupérer tous les utilisateurs
    fastify.get('/', {
        schema: createSwaggerSchema(
            'Récupère tous les utilisateurs.',
            [
                { message: 'Utilisateurs récupérés avec succès', data: [], status: 200 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: 'Erreur lors de la récupération des utilisateurs', data: [], status: 500 },
            ],
            null,
            true,
            GetAllUsers,
            ['Users']
        ),
        preHandler: [isAuthenticated, verifyAccess(UserRole.ADMIN)],
        handler: userController.getAllUsers,
    });

    // GET BY ID - Récupérer un utilisateur par ID
    fastify.get('/:id', {
        schema: createSwaggerSchema(
            'Récupère un utilisateur par ID.',
            [
                { message: 'Utilisateur récupéré avec succès', data: [], status: 200 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: 'Utilisateur non trouvé', data: [], status: 404 },
                { message: "Erreur lors de la récupération de l'utilisateur", data: [], status: 500 },
            ],
            null,
            true,
            null,
            ['Users']
        ),
        preHandler: [isAuthenticated],
        handler: userController.getUserById,
    });

    // CREATE - Créer un nouvel utilisateur
    fastify.post('/', {
        schema: createSwaggerSchema(
            'Crée un nouvel utilisateur.',
            [
                { message: 'Utilisateur créé avec succès', data: [], status: 201 },
                { message: 'Données invalides', data: [], status: 400 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: "Erreur lors de la création de l'utilisateur", data: [], status: 500 },
            ],
            CreateUser,
            true,
            null,
            ['Users']
        ),
        preHandler: [isAuthenticated, verifyAccess(UserRole.ADMIN)],
        handler: userController.createUser,
    });

    // UPDATE - Mettre à jour un utilisateur
    fastify.patch('/:id', {
        schema: createSwaggerSchema(
            'Met à jour un utilisateur.',
            [
                { message: 'Utilisateur mis à jour avec succès', data: [], status: 200 },
                { message: 'Données invalides', data: [], status: 400 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: 'Utilisateur non trouvé', data: [], status: 404 },
                { message: "Erreur lors de la mise à jour de l'utilisateur", data: [], status: 500 },
            ],
            UpdateUser,
            true,
            null,
            ['Users']
        ),
        preHandler: [isAuthenticated, verifyAccess(UserRole.ADMIN)],
        handler: userController.updateUser,
    });

    // DELETE - Supprimer un utilisateur
    fastify.delete('/:id', {
        schema: createSwaggerSchema(
            'Supprime un utilisateur.',
            [
                { message: 'Utilisateur supprimé avec succès', data: [], status: 204 },
                { message: 'Non autorisé', data: [], status: 401 },
                { message: 'Utilisateur non trouvé', data: [], status: 404 },
                { message: "Erreur lors de la suppression de l'utilisateur", data: [], status: 500 },
            ],
            null,
            true,
            null,
            ['Users']
        ),
        preHandler: [isAuthenticated, verifyAccess(UserRole.ADMIN)],
        handler: userController.deleteUser,
    });
}
```



